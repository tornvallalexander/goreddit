// Code generated by sqlc. DO NOT EDIT.
// source: subreddit.sql

package db

import (
	"context"
	"database/sql"
)

const createSubreddit = `-- name: CreateSubreddit :one
INSERT INTO subreddits (
    name,
    moderator,
    description
) VALUES (
    $1, $2, $3
) RETURNING name, moderator, followers, description, created_at
`

type CreateSubredditParams struct {
	Name        string         `json:"name"`
	Moderator   string         `json:"moderator"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateSubreddit(ctx context.Context, arg CreateSubredditParams) (Subreddit, error) {
	row := q.db.QueryRowContext(ctx, createSubreddit, arg.Name, arg.Moderator, arg.Description)
	var i Subreddit
	err := row.Scan(
		&i.Name,
		&i.Moderator,
		&i.Followers,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubreddit = `-- name: DeleteSubreddit :exec
DELETE FROM subreddits
WHERE name = $1
`

func (q *Queries) DeleteSubreddit(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteSubreddit, name)
	return err
}

const getSubreddit = `-- name: GetSubreddit :one
SELECT name, moderator, followers, description, created_at FROM subreddits
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetSubreddit(ctx context.Context, name string) (Subreddit, error) {
	row := q.db.QueryRowContext(ctx, getSubreddit, name)
	var i Subreddit
	err := row.Scan(
		&i.Name,
		&i.Moderator,
		&i.Followers,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
